<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>MacGRython</title><link href="http://tboquet.github.io/" rel="alternate"></link><link href="http://tboquet.github.io/feeds/all.atom.xml" rel="self"></link><id>http://tboquet.github.io/</id><updated>2015-08-03T10:28:00-04:00</updated><entry><title>Pelican + rST + Github</title><link href="http://tboquet.github.io/pelican-rst-github.html" rel="alternate"></link><updated>2015-08-03T10:28:00-04:00</updated><author><name>Thomas Boquet</name></author><id>tag:tboquet.github.io,2015-08-03:pelican-rst-github.html</id><summary type="html">&lt;img alt="Pelican" src="https://avatars0.githubusercontent.com/u/2043492?v=3&amp;amp;s=200" style="height: 100px;" /&gt;
&lt;p&gt;The messy cartesian organization of the information we could find in the fields of data and computer science needs to be written in order to be understood.
Because the goal of this blog is to quickly render some ideas, this process has to be fast and the production easy to read.&lt;/p&gt;
&lt;p&gt;To be able to share some experiments and meet these goals, I chose &lt;strong&gt;Pelican&lt;/strong&gt; and a base theme from &lt;strong&gt;pelican-theme&lt;/strong&gt; to begin blogging about my discoveries.
&lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; is an easy to learn, clean and efficient tool to be able to quickly publish some content online.
Because I write my Python package documentation using &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; with &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; I keep using the same markup language.&lt;/p&gt;
&lt;p&gt;Hosting the blog on &lt;a class="reference external" href="https://github.com/"&gt;Github&lt;/a&gt; is a good idea since the majority of the tutorials use this platform and there is a nice integration option in Pelican.
From the first look, these tool are good candidates to start sharing and they have a lot of custom options.&lt;/p&gt;
&lt;p&gt;The next post will describe all the steps to have a working configuration of Pelican.&lt;/p&gt;
</summary><category term="introduction"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>Test</title><link href="http://tboquet.github.io/test.html" rel="alternate"></link><updated>2015-08-03T10:28:00-04:00</updated><author><name>Thomas Boquet</name></author><id>tag:tboquet.github.io,2015-08-03:test.html</id><summary type="html">&lt;div class="section" id="this-is-a-test"&gt;
&lt;h2&gt;This is a test&lt;/h2&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\sum x_i = \beta\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;my_ar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_ar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;img alt="" src="../../images/test_files/test_4_0.png" /&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="python"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Who What Y</title><link href="http://tboquet.github.io/who-what-y.html" rel="alternate"></link><updated>2015-08-03T10:28:00-04:00</updated><author><name>Thomas Boquet</name></author><id>tag:tboquet.github.io,2015-08-03:who-what-y.html</id><summary type="html">&lt;p&gt;Experiments on various subjects using &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://www.r-project.org/"&gt;R&lt;/a&gt; with a MacGyver spirit. This blog is about &lt;strong&gt;data science&lt;/strong&gt; and &lt;strong&gt;machine learning&lt;/strong&gt; using hyper tuned paper clips.&lt;/p&gt;
</summary><category term="information"></category><category term="about"></category><category term="python"></category><category term="R"></category></entry></feed>